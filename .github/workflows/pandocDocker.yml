name: ReadMe Documentation
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches-ignore: [ '**-alpha', '**-dev' ]
    # paths-ignore:
    #   - '.github/workflows/**'
    #   - 'docs/**'
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

jobs:
  convert_via_pandoc:
    env:
      GH_TOKEN: ${{ github.token }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: PowerShell Versioning Logic
        id: pwsh-versioning
        shell: pwsh
        run: |
          
          $TitlePageGraphic = "https://raw.githubusercontent.com/Nillth/Qlik_ReadMe_Assets/main/docs/images/TitlePage.png"
          $Logo = "https://raw.githubusercontent.com/Nillth/Qlik_ReadMe_Assets/main/docs/images/Qlik-Logo_RGB.png"
          $CSS = "https://raw.githubusercontent.com/Nillth/Qlik_ReadMe_Assets/main/docs/theme/qlik.css"
          [System.IO.DirectoryInfo]$Temp = "./TempAssets"
          $Temp.Create()
          $LTitlePageGraphic = "$($Temp.FullName)/$($($TitlePageGraphic -split("/"))[-1])"
          $LLogo = "$($Temp.FullName)/$($($Logo -split("/"))[-1])"
          $LCSS = "$($Temp.FullName)/$($($CSS -split("/"))[-1])"
          Invoke-RestMethod $TitlePageGraphic -OutFile $LTitlePageGraphic
          Invoke-RestMethod $Logo -OutFile $LLogo
          Invoke-RestMethod $CSS -OutFile $LCSS
          "TitlePageGraphic=$($LTitlePageGraphic)" >> $ENV:GITHUB_OUTPUT
          "Logo=$($LLogo)" >> $ENV:GITHUB_OUTPUT
          "CSS=$($LCSS))" >> $ENV:GITHUB_OUTPUT

          #Set the Version Tag
          try {$Tag = $(git tag -l --sort=refname v* | Select-Object -Last 1)}catch{}
          if ($Null -eq $Tag) {$Tag = 'v0.0.0.0'}
          try {$Version = [version]::new(($Tag).substring(1));}catch{$Version = [version]::new('0.0.0.0');}
          $ModuleVersion = [version]::new("$($Version.Major).$($Version.Minor).$("$([datetime]::utcnow.year)$([datetime]::UtcNow.DayOfYear)").$([datetime]::UtcNow.TimeOfDay.TotalSeconds.ToString('#'))")

          #Get the MD File list
          $MDFiles = Get-ChildItem -recurse -filter "*.md"
          $MDFileList = $MDFiles.FullName -join " "

          #Set the Output Variables
          "Version=v$($ModuleVersion)" >> $ENV:GITHUB_OUTPUT
          "title=${{ github.event.repository.name }} - ReadMe" >> $ENV:GITHUB_OUTPUT
          "author=${{github.server_url}}/${{github.repository}}" >> $ENV:GITHUB_OUTPUT
          "readmeZip=${{ github.event.repository.name }}-Readme" >> $ENV:GITHUB_OUTPUT
          "MDFileList=$($MDFileList)" >> $ENV:GITHUB_OUTPUT

          #Update the status.
          "#### Details ``$($RepositoryInfo|Convertto-json)``" >> $env:GITHUB_STEP_SUMMARY
          "#### Version ``$($ModuleVersion)``" >> $env:GITHUB_STEP_SUMMARY
          "#### RepositoryURI ``$($RepositoryURI)``" >> $env:GITHUB_STEP_SUMMARY

          "#### MDFilLeist ``$($MDFileList)``" >> $env:GITHUB_STEP_SUMMARY
      - name: Create folder
        run: |
          mkdir -p out
      - uses: docker://pandoc/extra:latest
        with:
          args: >-  # allows you to break string into multiple lines
            --standalone
            --embed-resources
            --css "${{ steps.pwsh-versioning.outputs.CSS }}"
            --output=./out/ReadMe.html
            README.md
      - uses: docker://pandoc/extra:latest
        with:
          args: >-  # allows you to break string into multiple lines 
            --standalone
            --embed-resources
            --template /.pandoc/templates/eisvogel.latex
            --listings
            -o ./out/README.pdf 
            ${{ steps.pwsh-versioning.outputs.MDFilLeist }}
            -V lang=en-GB 
            -V titlepage 
            -V titlepage-text-color=009845 
            -V titlepage-logo="${{ steps.pwsh-versioning.outputs.Logo }}"
            -V titlepage-background="${{ steps.pwsh-versioning.outputs.TitlePageGraphic }}"
            --metadata title="${{ steps.pwsh-versioning.outputs.title }}"
            --metadata author="${{ steps.pwsh-versioning.outputs.author }}"
      - uses: actions/upload-artifact@v1
        name: Upload Artifacts  
        if: success() || failure()
        with:
          name: "${{ steps.pwsh-versioning.outputs.readmeZip }}"
          path: out
      - name: upload file
        if: success()
        run: |
          gh release create --draft --generate-notes --title ${{ steps.pwsh-versioning.outputs.Version }} out/*.*

